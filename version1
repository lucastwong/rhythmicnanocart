<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <style>
      html,
      body {
        overflow: hidden;
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
      }

      #renderCanvas {
        width: 100%;
        height: 100%;
        touch-action: none;
      }

    </style>
    <script src="https://cdn.babylonjs.com/babylon.js"></script>
    <script src="https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js"></script>
    <script src="https://cdn.babylonjs.com/gui/babylon.gui.min.js"></script>
    <script src="https://cdn.babylonjs.com/ammo.js"></script>
    <script src="https://code.jquery.com/pep/0.4.3/pep.js"></script>
  </head>

  <body>
    <canvas id="renderCanvas" touch-action="none"></canvas>
    <script>
      var canvas = document.getElementById("renderCanvas");
      var engine = new BABYLON.Engine(canvas, true);
      /******* Add the create scene function ******/
      var vehicle, scene, chassisMesh, greenMaterial, blackMaterial;
      var wheelMeshes = [];
      var actions = {
        accelerate: false,
        brake: false,
        right: false,
        left: false
      };
      var keysActions = {
        "KeyW": 'acceleration',
        "KeyS": 'braking',
        "KeyA": 'left',
        "KeyD": 'right'
      };
      var vehicleReady = false;
      var ZERO_QUATERNION = new BABYLON.Quaternion();
      var chassisWidth = 1.8;
      var chassisHeight = .6;
      var chassisLength = 4;
      var massVehicle = 200;
      var wheelAxisPositionBack = -1;
      var wheelRadiusBack = .4;
      var wheelWidthBack = .3;
      var wheelHalfTrackBack = 1;
      var wheelAxisHeightBack = 0.4;
      var wheelAxisFrontPosition = 1.0;
      var wheelHalfTrackFront = 1;
      var wheelAxisHeightFront = 0.4;
      var wheelRadiusFront = .4;
      var wheelWidthFront = .3;
      var friction = 5;
      var suspensionStiffness = 10;
      var suspensionDamping = 0.3;
      var suspensionCompression = 4.4;
      var suspensionRestLength = 0.6;
      var rollInfluence = 0.0;
      var steeringIncrement = .01;
      var steeringClamp = 0.2;
      var maxEngineForce = 500;
      var maxBreakingForce = 10;
      var incEngine = 10.0;
      var FRONT_LEFT = 0;
      var FRONT_RIGHT = 1;
      var BACK_LEFT = 2;
      var BACK_RIGHT = 3;
      var wheelDirectionCS0;
      var wheelAxleCS;
      var createScene = async function() {
        scene = new BABYLON.Scene(engine);
        var camera = new BABYLON.FreeCamera("camera1", new BABYLON.Vector3(0, 5, -10), scene);
        camera.setTarget(BABYLON.Vector3.Zero());
        camera.wheelPrecision = 0.2;
        camera.attachControl(canvas, true);
        var light = new BABYLON.HemisphericLight("light1", new BABYLON.Vector3(0, 1, 0), scene);
        light.intensity = 0.7;
        greenMaterial = new BABYLON.StandardMaterial("RedMaterial", scene);
        greenMaterial.diffuseColor = new BABYLON.Color3(0.5, 0.8, 0.5);
        greenMaterial.emissiveColor = new BABYLON.Color3(0.5, 0.8, 0.5);
        blackMaterial = new BABYLON.StandardMaterial("RedMaterial", scene);
        blackMaterial.diffuseColor = new BABYLON.Color3(0.1, 0.1, 0.1);
        blackMaterial.emissiveColor = new BABYLON.Color3(0.1, 0.1, 0.1);
        var physicsPlugin = new BABYLON.AmmoJSPlugin();
        var gravityVector = new BABYLON.Vector3(0, -10, 0);
        scene.enablePhysics(gravityVector, physicsPlugin);
        wheelDirectionCS0 = new Ammo.btVector3(0, -1, 0);
        wheelAxleCS = new Ammo.btVector3(-1, 0, 0);
        var bigbox = new BABYLON.StandardMaterial("wood", scene);
        bigbox.diffuseTexture = new BABYLON.Texture("https://www.babylonjs.com/assets/albedo.png", scene);
        bigbox.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);
        var materialWood = new BABYLON.StandardMaterial("wood", scene);
        bigbox.material = materialWood;
        var ground = BABYLON.Mesh.CreateGround("ground", 300, 300, 2, scene);
        var groundMaterial = new BABYLON.StandardMaterial("groundMaterial", scene);
        ground.material = bigbox;
        ground.physicsImpostor = new BABYLON.PhysicsImpostor(ground, BABYLON.PhysicsImpostor.BoxImpostor, {
          mass: 0,
          friction: 0.5,
          restitution: 0.7
        }, scene);
        for (let i = 0; i < 100; i++) {
          createBox();
        }
        var advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI("UI");
        var Forward = function() {
          actions[keysActions["KeyW"]] = true;
        }
        var Backward = function() {
          actions[keysActions["KeyS"]] = true;
        }
        var Left = function() {
          actions[keysActions["KeyA"]] = true;
        }
        var Right = function() {
          actions[keysActions["KeyD"]] = true;
        }
        var UnForward = function() {
          actions[keysActions["KeyW"]] = false;
        }
        var UnBackward = function() {
          actions[keysActions["KeyS"]] = false;
        }
        var UnLeft = function() {
          actions[keysActions["KeyA"]] = false;
        }
        var UnRight = function() {
          actions[keysActions["KeyD"]] = false;
        }
        var button = BABYLON.GUI.Button.CreateSimpleButton("but", "w ↑");
        button.width = 0.1;
        button.height = "80px";
        button.color = "white";
        button.background = "#1388AF";
        button.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
        button.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;
        button.top = "-110px";
        button.onPointerDownObservable.add(Forward);
        button.onPointerUpObservable.add(UnForward);
        advancedTexture.addControl(button);
        var button2 = BABYLON.GUI.Button.CreateSimpleButton("but", "s ↓");
        button2.width = 0.1;
        button2.height = "80px";
        button2.color = "white";
        button2.background = "#1388AF";
        button2.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
        button2.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;
        button2.top = "-10px";
        button2.onPointerDownObservable.add(Backward);
        button2.onPointerUpObservable.add(UnBackward);
        advancedTexture.addControl(button2);
        var button3 = BABYLON.GUI.Button.CreateSimpleButton("but", "a ←");
        button3.width = 0.1;
        button3.height = "80px";
        button3.color = "white";
        button3.background = "#1388AF";
        button3.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
        button3.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;
        button3.left = "-100px";
        button3.top = "-10px";
        button3.onPointerDownObservable.add(Left);
        button3.onPointerUpObservable.add(UnLeft);
        advancedTexture.addControl(button3);
        var button4 = BABYLON.GUI.Button.CreateSimpleButton("but", "d →");
        button4.width = 0.1;
        button4.height = "80px";
        button4.color = "white";
        button4.background = "#1388AF";
        button4.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;
        button4.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;
        button4.left = "100px";
        button4.top = "-10px";
        button4.onPointerDownObservable.add(Right);
        button4.onPointerUpObservable.add(UnRight);
        advancedTexture.addControl(button4);
        createVehicle(new BABYLON.Vector3(0, 4, -20), ZERO_QUATERNION);
        window.addEventListener('keydown', keydown);
        window.addEventListener('keyup', keyup);
        scene.registerBeforeRender(function() {
          var dt = engine.getDeltaTime().toFixed() / 1000;
          if (vehicleReady) {
            var speed = vehicle.getCurrentSpeedKmHour();
            var maxSteerVal = 0.2;
            breakingForce = 0;
            engineForce = 0;
            if (actions.acceleration) {
              if (speed < -1) {
                breakingForce = maxBreakingForce;
              } else {
                engineForce = maxEngineForce;
              }
            } else if (actions.braking) {
              if (speed > 1) {
                breakingForce = maxBreakingForce;
              } else {
                engineForce = -maxEngineForce;
              }
            }
            if (actions.right) {
              if (vehicleSteering < steeringClamp) {
                vehicleSteering += steeringIncrement;
              }
            } else if (actions.left) {
              if (vehicleSteering > -steeringClamp) {
                vehicleSteering -= steeringIncrement;
              }
            } else {
              vehicleSteering = 0;
            }
            vehicle.applyEngineForce(engineForce, FRONT_LEFT);
            vehicle.applyEngineForce(engineForce, FRONT_RIGHT);
            vehicle.setBrake(breakingForce / 2, FRONT_LEFT);
            vehicle.setBrake(breakingForce / 2, FRONT_RIGHT);
            vehicle.setBrake(breakingForce, BACK_LEFT);
            vehicle.setBrake(breakingForce, BACK_RIGHT);
            vehicle.setSteeringValue(vehicleSteering, FRONT_LEFT);
            vehicle.setSteeringValue(vehicleSteering, FRONT_RIGHT);
            var tm, p, q, i;
            var n = vehicle.getNumWheels();
            for (i = 0; i < n; i++) {
              vehicle.updateWheelTransform(i, true);
              tm = vehicle.getWheelTransformWS(i);
              p = tm.getOrigin();
              q = tm.getRotation();
              wheelMeshes[i].position.set(p.x(), p.y(), p.z());
              wheelMeshes[i].rotationQuaternion.set(q.x(), q.y(), q.z(), q.w());
              wheelMeshes[i].rotate(BABYLON.Axis.Z, Math.PI / 2);
            }
            tm = vehicle.getChassisWorldTransform();
            p = tm.getOrigin();
            q = tm.getRotation();
            chassisMesh.position.set(p.x(), p.y(), p.z());
            chassisMesh.rotationQuaternion.set(q.x(), q.y(), q.z(), q.w());
            chassisMesh.rotate(BABYLON.Axis.X, Math.PI);
          }
        });
        return scene;
      };
      var composers = ["https://upload.wikimedia.org/wikipedia/commons/9/9b/Sixteenth_note.gif",
        "https://upload.wikimedia.org/wikipedia/commons/6/6a/Eighth_note.gif",
        "https://upload.wikimedia.org/wikipedia/commons/b/b4/Quarter_note.gif",
        "https://upload.wikimedia.org/wikipedia/commons/5/57/Half_note.gif",
        "https://upload.wikimedia.org/wikipedia/commons/9/94/Whole_note.gif"
      ];
      var winner = Math.floor(Math.random() * 5);

      function createBox() {
        var materialWood = new BABYLON.StandardMaterial("wood", scene);
        var com = Math.floor(Math.random() * composers.length);
        materialWood.diffuseTexture = new BABYLON.Texture(composers[com], scene);
        materialWood.emissiveColor = new BABYLON.Color3(0.5, 0.5, 0.5);
        var box = new BABYLON.Mesh.CreateBox("box", 5, scene);
        box.position = new BABYLON.Vector3(Math.random() * 300 - 150, 50, Math.random() * 300 - 150);
        box.material = materialWood;
        if (winner !== com) {
          box.physicsImpostor = new BABYLON.PhysicsImpostor(box, BABYLON.PhysicsImpostor.BoxImpostor, {
            mass: 10000,
            friction: 0.5,
            restitution: 0.7
          }, scene);
        } else {
          box.physicsImpostor = new BABYLON.PhysicsImpostor(box, BABYLON.PhysicsImpostor.BoxImpostor, {
            mass: 0.1,
            friction: 0.5,
            restitution: 0.7
          }, scene);
        }
      }

      function createVehicle(pos, quat) {
        var physicsWorld = scene.getPhysicsEngine().getPhysicsPlugin().world;
        var geometry = new Ammo.btBoxShape(new Ammo.btVector3(chassisWidth * .5, chassisHeight * .5, chassisLength * .5));
        var transform = new Ammo.btTransform();
        transform.setIdentity();
        transform.setOrigin(new Ammo.btVector3(0, 5, 0));
        transform.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));
        var motionState = new Ammo.btDefaultMotionState(transform);
        var localInertia = new Ammo.btVector3(0, 0, 0);
        geometry.calculateLocalInertia(massVehicle, localInertia);
        chassisMesh = createChassisMesh(chassisWidth, chassisHeight, chassisLength);
        var massOffset = new Ammo.btVector3(0, 0.4, 0);
        var transform2 = new Ammo.btTransform();
        transform2.setIdentity();
        transform2.setOrigin(massOffset);
        var compound = new Ammo.btCompoundShape();
        compound.addChildShape(transform2, geometry);
        var body = new Ammo.btRigidBody(new Ammo.btRigidBodyConstructionInfo(massVehicle, motionState, compound, localInertia));
        body.setActivationState(4);
        physicsWorld.addRigidBody(body);
        var engineForce = 0;
        var vehicleSteering = 0;
        var breakingForce = 0;
        var tuning = new Ammo.btVehicleTuning();
        var rayCaster = new Ammo.btDefaultVehicleRaycaster(physicsWorld);
        vehicle = new Ammo.btRaycastVehicle(tuning, body, rayCaster);
        vehicle.setCoordinateSystem(0, 1, 2);
        physicsWorld.addAction(vehicle);
        var trans = vehicle.getChassisWorldTransform();

        function addWheel(isFront, pos, radius, width, index) {
          var wheelInfo = vehicle.addWheel(
            pos,
            wheelDirectionCS0,
            wheelAxleCS,
            suspensionRestLength,
            radius,
            tuning,
            isFront);
          wheelInfo.set_m_suspensionStiffness(suspensionStiffness);
          wheelInfo.set_m_wheelsDampingRelaxation(suspensionDamping);
          wheelInfo.set_m_wheelsDampingCompression(suspensionCompression);
          wheelInfo.set_m_maxSuspensionForce(600000);
          wheelInfo.set_m_frictionSlip(40);
          wheelInfo.set_m_rollInfluence(rollInfluence);
          wheelMeshes[index] = createWheelMesh(radius, width);
        }
        addWheel(true, new Ammo.btVector3(wheelHalfTrackFront, wheelAxisHeightFront, wheelAxisFrontPosition), wheelRadiusFront, wheelWidthFront, FRONT_LEFT);
        addWheel(true, new Ammo.btVector3(-wheelHalfTrackFront, wheelAxisHeightFront, wheelAxisFrontPosition), wheelRadiusFront, wheelWidthFront, FRONT_RIGHT);
        addWheel(false, new Ammo.btVector3(-wheelHalfTrackBack, wheelAxisHeightBack, wheelAxisPositionBack), wheelRadiusBack, wheelWidthBack, BACK_LEFT);
        addWheel(false, new Ammo.btVector3(wheelHalfTrackBack, wheelAxisHeightBack, wheelAxisPositionBack), wheelRadiusBack, wheelWidthBack, BACK_RIGHT);
        vehicleReady = true;
      }

      function createChassisMesh(w, l, h) {
        var mesh = new BABYLON.MeshBuilder.CreateBox("box", {
          width: w,
          depth: h,
          height: l
        }, scene);
        mesh.rotationQuaternion = new BABYLON.Quaternion();
        mesh.material = greenMaterial;
        var camera = new BABYLON.FollowCamera("FollowCam", new BABYLON.Vector3(0, 10, -10), scene);
        camera.radius = 10;
        camera.heightOffset = 4;
        camera.rotationOffset = 0;
        camera.cameraAcceleration = 0.05;
        camera.maxCameraSpeed = 400;
        camera.attachControl(canvas, true);
        camera.lockedTarget = mesh; //version 2.5 onwards
        scene.activeCamera = camera;
        return mesh;
      }

      function createWheelMesh(radius, width) {
        var mesh = new BABYLON.MeshBuilder.CreateCylinder("Wheel", {
          diameter: 1,
          height: 0.5,
          tessellation: 6
        }, scene);
        mesh.rotationQuaternion = new BABYLON.Quaternion();
        mesh.material = blackMaterial;
        return mesh;
      }

      function keyup(e) {
        if (keysActions[e.code]) {
          actions[keysActions[e.code]] = false;
        }
      }

      function keydown(e) {
        if (keysActions[e.code]) {
          actions[keysActions[e.code]] = true;
        }
      }
      /******* End of the create scene function ******/

      createScene().then(scene => {
        engine.runRenderLoop(function() {
          scene.render();
        });
        window.addEventListener("resize", function() {
          engine.resize();
        });
      });

    </script>
  </body>

</html>

